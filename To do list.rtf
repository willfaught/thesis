{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf290
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww12420\viewh9940\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs24 \cf0 To do list\
\
- Use 'forall type' consistently.  No 'universally quantified', 'universal', 'polymorphic', etc.\
- H/M progress theorem: Case 1.7 (MH) is wrong, each case assumes the exp is in the hole, so use Fig. 2.14. Check other cases/theorems! PROOF IS WRONG ABOUT FORCED/UNFORCED VALUE PROGRESS!\
- Incorporate Clements' old email feedback\
- Get parametricity def from Pierce\
- Note that you kept the fix operand type the same in your summary email of the final draft\
- Mention labels only used by system; programmer error can foul it up\
- Recheck proof for forced/unforced value usage - see ML app in progress!!!\
- Revise whole paper to use the new syntax!!\
- Verify using tyvars for labels is okay for nested forall types\
- Does HM/MH need to be stripped of labels in typing rules? YES?\
- Stuck state for MH/HM op sem for label types?\
- Use forced value variables in guard op seem?\
- Should labels be able to be used generally, or only supported by uses of the system for interop?\
- Importation of type abstractions into Scheme loses the type abstraction, cannot roundtrip the value from and to Haskell or ML. Maybe some sort of auto L abstraction for Scheme functions imported into H/M?\
- Labels on lumps to preserve parametricity?\
- Ask Clements about conversion of type abstractions between H and M, specifically about how I turn H types into M types and vice versa\
- Point out to Clements all the model changes: label syntax, language symbol position, dropped HS/MS import forall forced values, separate H/M types, etc.\
- Change unlabel syntax to add an "i" subscript for the variable part of the label\
- Ask Clements if okay to omit parts of M proof for brevity where identical to H?\
}